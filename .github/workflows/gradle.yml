name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  IMAGE_REGISTRY: 'europe-west2-docker.pkg.dev/valid-chess-422514-m3'

permissions:
  contents: read
  packages: write

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      digest: ${{ steps.push_image_gcr.outputs.Digest }}
    permissions:
      contents: read
      id-token: write
      
    env:
      GH_TOKEN: ${{ github.token }}
    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: '1.8'
        
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0

    - name: Build with Gradle Wrapper
      run: ./gradlew build --quiet

    - name: Print Output Location
      run: echo "Gradle build output location:${{ github.workspace }}/build"

    - name: Find JAR file
      run: |
        JAR_NAME=$(basename $(find . -name "*.jar" -not -path "./build/*"))
        echo "::set-output name=jar_name::$JAR_NAME"
        
    - name: Upload JAR artifact
      uses: actions/upload-artifact@v2
      with:
        name: my-artifact
        path: ${{ github.workspace }}/build/libs/${{ steps.find_jar.outputs.jar_name }}

    - name: Cache Gradle packages
      uses: actions/cache@v2
      with:
       path: ~/.gradle/caches
       key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
       restore-keys: |
        ${{ runner.os }}-gradle-

    - name: Extract details for tag
      shell: bash
      run: |
            echo "DATE=$(date +'%Y%m%d')" >> $GITHUB_ENV
            echo "TIME=$(date +'%H%M%S')" >> $GITHUB_ENV
            echo "COMMIT_ID=$(echo ${GITHUB_SHA::7})" >> $GITHUB_ENV
            PR_NUMBER=$(gh pr list --repo ${{ github.repository }} --state merged --search "${GITHUB_SHA}" --json number --jq '.[0].number')
            PR_BRANCH=$(gh pr view $PR_NUMBER --repo ${{ github.repository }} --json headRefName --jq '.headRefName')
            echo "PR_NUMBER=$PR_NUMBER" >> $GITHUB_ENV
            echo "PR_BRANCH=$PR_BRANCH" >> $GITHUB_ENV

    - name: Create custom tag
      run: |
       echo "custom_tag=${{ env.DATE }}-${{ env.TIME }}-PR${{ env.PR_NUMBER }}-branch_name${{ env.PR_BRANCH }}-${{ env.COMMIT_ID }}" | tee >(cat >> $GITHUB_ENV) > custom_tag.txt
           
    - name: Authenticate with OIDC
      if: env.IMAGE_REGISTRY != ''
      id: auth
      uses: google-github-actions/auth@v2
      with:
          token_format: access_token
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}
          access_token_lifetime: 600s

    - name: Configure Docker to use the gcloud command-line tool as a credential helper
      if: env.IMAGE_REGISTRY != ''
      run: |
        gcloud --quiet auth configure-docker europe-west2-docker.pkg.dev

    - name: Build and push Docker image to GAR
      if: env.IMAGE_REGISTRY != ''
      id: push_image_gcr
      run: |
        docker build -t ${{ env.IMAGE_REGISTRY }}/test-docker-artifact/gartest:${{ env.custom_tag}} .
        docker push ${{ env.IMAGE_REGISTRY }}/test-docker-artifact/gartest:${{ env.custom_tag}}

    - name: Log in to GitHub Docker Registry
      uses: docker/login-action@v1 
      with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.REPO_TOKEN }}

    - name: Build and push Docker image to GitHub
      uses: docker/build-push-action@v2
      with:
          context: .
          push: true
          tags: ghcr.io/vaibhavweb-sys/test-workflow/testimage:${{ env.custom_tag}}

    - name: Upload combined value
      uses: actions/upload-artifact@v2
      with:
         name: custom_tag
         path: custom_tag.txt
