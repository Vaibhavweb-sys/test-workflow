name: Build and Push Container Image to Registry

on:
 workflow_call:
  outputs:
   IMAGE_DIGEST:
    description: Image digest of resulting docker image
    value: ${{ jobs.build-and-push.outputs.digest }}
   GAR_IMAGE_DIGEST:
    description: Image digest of resulting gar image
    value: ${{ jobs.build-and-push.outputs.gar-digest }}
   DOCKER_IMAGE_TAG:
    description: Tag of Docker Image
    value: ${{ jobs.build-and-push.outputs.docker_image_tag }}
  inputs:
   ARTIFACT_PROJECT:
    description: The name of the GCP project where all artifacts will be stored
    type: string
    default: platform-enterprise-image-6938
    required: false
   DOCKER_IMAGE_NAME:
    description: Name of Docker Image
    type: string 
    required: true 
   DOCKER_IMAGE_TAG:
    description: Tag of Docker Image
    type: string 
    required: true 
   DOCKERFILE_PATH:
    description: Path of Dockerfile
    type: string 
    required: true 
   BUILD_CONTEXT:
    description: Build Context
    type: string 
    default: .
    required: false 
   CLEAN_UP_IMAGES:
    description: Set to true to clean up old images. The number of images to retain can be configured using the MIN_VERSION_TO_KEEP input variable.
    type: boolean
    default: true
    required: false
   MIN_VERSIONS_TO_KEEP:
    description: The minimum number of image versions to keep starting with the latest version. To delete all versions set this to 0.
    type: number
    default: 50
    required: false
   TRIVYIGNORES:
    description: Comma-separated list of relative paths in repository to one or more .trivyignore files
    type: string
    default: ""
    required: false
   INCLUDE_TEST:
    description: Whether to execute test projects located in tests folder
    type: boolean
    default: false
    required: false
   PUSH_IMAGE:
    description: Whether to push the built image to the registry
    required: false
    type: boolean
    default: true
   TEAM_PREFIX:
    description: The prefix of the team name
    type: string
    required: false
    default: ""

permissions: 
 contents: read
 packages: write
 id-token: write # Explicitly grant permission to write the ID token for GCP authentication

env: 
 DOCKER_REGISTRY: ghcr.io
 ORGANISATION_NAME: frasers-group
 TEST_TAG: test

jobs:
 build-and-push:
  runs-on: ubuntu-latest
  outputs:
   digest: ${{ steps.push-image.outputs.digest }}
   gar-digest: ${{ steps.docker-push-gar.outputs.digest }}
   docker_image_tag: ${{ steps.create_docker_image_tag.outputs.docker_image_tag }}

  steps:
   - name: Checkout code
    uses: actions/checkout@v3.5.2
    with:
     token: ${{ secrets.GITHUB_TOKEN }}
     
   - name: Extract details for tag
    shell: bash
    run: |
     echo "date=$(date +'%Y%m%d')" >> $GITHUB_ENV
     git fetch origin $GITHUB_REF
     echo "commit_id=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
     echo "pr_number=$(git log -1 --pretty=%B | awk '/Merge pull request/ {print $4}' | cut -d'/' -f4 | tr -d '#')" >> $GITHUB_ENV

   - name: Create Docker Image Tag
    id: create_docker_image_tag
    run: |
     echo "docker_image_tag=${{ env.date }}-run${{ github.run_number }}-pr${{ env.pr_number }}-${{ env.commit_id }}" | tee >(cat >> $GITHUB_ENV) >>$GITHUB_OUTPUT

   - name: Set up Docker Buildx
    uses: docker/setup-buildx-action@v2.5.0

   # Deploy the App to GitHub Registry
   - name: Log in to GitHub container registry
    uses: docker/login-action@v2.1.0
    with:
     registry: ghcr.io
     username: ${{ github.actor }}
     password: ${{ secrets.GITHUB_TOKEN }}

   - name: Add Source
    if: ${{ inputs.INCLUDE_TEST }}
    run: dotnet nuget add source --username 'github' --password ${{ secrets.GITHUB_TOKEN }} --store-password-in-clear-text --name 'github' 'https://nuget.pkg.github.com/frasers-group/index.json'

   - name: Run Tests
    if: ${{ inputs.INCLUDE_TEST }}
    shell: bash
    run: |
     for file in $(find . -type f \( -iname '*.tests.csproj' \) ! -path './packages/*' ! -path '*/obj/*' | grep -iv testadapter); do
      echo Executing tests in found test library $file
      dotnet test $file 
     done

   - name: Build Container Image 
    uses: docker/build-push-action@v4.0.0
    with:
     load: true
     push: false
     tags: ${{ env.TEST_TAG }}
     file: ${{ inputs.DOCKERFILE_PATH }}
     context: ${{ inputs.BUILD_CONTEXT }}
     secrets: |
      "github_token=${{ secrets.GITHUB_TOKEN }}"

   - name: Run Trivy vulnerability scanner
    uses: aquasecurity/trivy-action@v0.9.2
    with:
     image-ref: ${{ env.TEST_TAG }}
     format: table
     exit-code: 0 # don't fail workflow if vulnerabilities found
     ignore-unfixed: true
     trivyignores: ${{ inputs.TRIVYIGNORES }}
     vuln-type: os,library
     severity: CRITICAL,HIGH
     
   - name: Run Checkov scan against Dockerfile
    uses: bridgecrewio/checkov-action@v12.0.0
    if: always()
    with:
     quiet: true # display only failed checks
     soft_fail: true # don't fail workflow if vulnerabilities found
     file: ${{ inputs.DOCKERFILE_PATH }}
     framework: dockerfile
     skip_check: CKV_DOCKER_2

   - name: Push container image to registry
    if: inputs.PUSH_IMAGE
    id: push-image
    uses: docker/build-push-action@v4.0.0
    with:
     push: true
     tags: ${{ env.DOCKER_REGISTRY }}/${{ env.ORGANISATION_NAME }}/${{ inputs.DOCKER_IMAGE_NAME }}:${{ env.docker_image_tag }}
     file: ${{ inputs.DOCKERFILE_PATH }}
     context: ${{ inputs.BUILD_CONTEXT }}

   - name: Clean-up old images
    uses: actions/delete-package-versions@v4.1.1
    if: inputs.CLEAN_UP_IMAGES
    with:
     package-name: ${{ inputs.DOCKER_IMAGE_NAME }}
     package-type: container
     min-versions-to-keep: ${{ inputs.MIN_VERSIONS_TO_KEEP }}

   # Deploy the App to Google Artifact Registry
   - id: 'auth'
    name: Authenticate with GCP
    uses: google-github-actions/auth@v1.1.1
    if: ${{inputs.TEAM_PREFIX != ''}}
    with:
     token_format: access_token
     workload_identity_provider: 'projects/279795997641/locations/global/workloadIdentityPools/github-actions/providers/github-actions'
     service_account: 'sa-registry-${{inputs.TEAM_PREFIX}}-push@${{inputs.ARTIFACT_PROJECT}}.iam.gserviceaccount.com'
     access_token_lifetime: 600s

   - name: Configure Docker for Google Artifact Registry
    if: ${{inputs.TEAM_PREFIX != ''}}
    run: gcloud auth configure-docker europe-docker.pkg.dev --quiet

   - name: 'Set up Cloud SDK'
    if: ${{inputs.TEAM_PREFIX != ''}}
    uses: 'google-github-actions/setup-gcloud@v2.0.0'
    with:
     version: '>= 363.0.0'

   - name: Set active account
    if: ${{inputs.TEAM_PREFIX != ''}}
    run: gcloud config set account sa-registry-${{inputs.TEAM_PREFIX}}-push@${{inputs.ARTIFACT_PROJECT}}.iam.gserviceaccount.com

   - name: Login to Artifact Registry
    if: ${{inputs.TEAM_PREFIX != ''}}
    uses: docker/login-action@v2.1.0
    with:
     registry: europe-docker.pkg.dev
     username: oauth2accesstoken
     password: ${{ steps.auth.outputs.access_token }}
 
   - id: docker-push-gar
    name: Tag Docker image and push to Google Artifact Registry
    if: ${{inputs.TEAM_PREFIX != ''}}
    uses: docker/build-push-action@v4.0.0
    with:
     push: true
     file: ${{ inputs.DOCKERFILE_PATH }}
     context: ${{ inputs.BUILD_CONTEXT }}
     tags: |
       europe-docker.pkg.dev/${{inputs.ARTIFACT_PROJECT}}/${{inputs.TEAM_PREFIX}}-container-registry/${{ inputs.DOCKER_IMAGE_NAME }}:${{ env.docker_image_tag }}
     secrets: |
      "github_token=${{ secrets.GITHUB_TOKEN }}"
